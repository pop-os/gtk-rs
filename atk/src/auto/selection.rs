// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::Object;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    pub struct Selection(Interface<ffi::AtkSelection, ffi::AtkSelectionIface>);

    match fn {
        get_type => || ffi::atk_selection_get_type(),
    }
}

pub const NONE_SELECTION: Option<&Selection> = None;

pub trait SelectionExt: 'static {
    fn add_selection(&self, i: i32) -> bool;

    fn clear_selection(&self) -> bool;

    fn get_selection_count(&self) -> i32;

    fn is_child_selected(&self, i: i32) -> bool;

    fn ref_selection(&self, i: i32) -> Option<Object>;

    fn remove_selection(&self, i: i32) -> bool;

    fn select_all_selection(&self) -> bool;

    fn connect_selection_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Selection>> SelectionExt for O {
    fn add_selection(&self, i: i32) -> bool {
        unsafe {
            from_glib(ffi::atk_selection_add_selection(
                self.as_ref().to_glib_none().0,
                i,
            ))
        }
    }

    fn clear_selection(&self) -> bool {
        unsafe {
            from_glib(ffi::atk_selection_clear_selection(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_selection_count(&self) -> i32 {
        unsafe { ffi::atk_selection_get_selection_count(self.as_ref().to_glib_none().0) }
    }

    fn is_child_selected(&self, i: i32) -> bool {
        unsafe {
            from_glib(ffi::atk_selection_is_child_selected(
                self.as_ref().to_glib_none().0,
                i,
            ))
        }
    }

    fn ref_selection(&self, i: i32) -> Option<Object> {
        unsafe {
            from_glib_full(ffi::atk_selection_ref_selection(
                self.as_ref().to_glib_none().0,
                i,
            ))
        }
    }

    fn remove_selection(&self, i: i32) -> bool {
        unsafe {
            from_glib(ffi::atk_selection_remove_selection(
                self.as_ref().to_glib_none().0,
                i,
            ))
        }
    }

    fn select_all_selection(&self) -> bool {
        unsafe {
            from_glib(ffi::atk_selection_select_all_selection(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn connect_selection_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn selection_changed_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut ffi::AtkSelection,
            f: glib::ffi::gpointer,
        ) where
            P: IsA<Selection>,
        {
            let f: &F = &*(f as *const F);
            f(&Selection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"selection-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    selection_changed_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for Selection {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Selection")
    }
}
